package ouanfind.com.action.finddictionary;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.Date;import java.io.ByteArrayOutputStream;import java.io.InputStream;import java.io.PrintStream;import javax.servlet.http.HttpServletRequest;import org.apache.log4j.Logger;import org.apache.struts2.ServletActionContext;import com.opensymphony.xwork2.ActionContext;import ouanfind.com.service.FinddictionaryService;import ouanfind.com.action.finddictionary.BaseAction;import ouanfind.com.bean.*;@SuppressWarnings("serial")public class FinddictionaryAction extends BaseAction {    private FinddictionaryService service;    private Finddictionary finddictionary;    private String      fdtype_c;    private String      fdname_c;    private String      fdvalue_c;    private String      fdremark_c;    private Integer      fdparentid_c;    private String      fddictionarystatus_c;    private String      fdoperator_c;    private Date      fdoperatedate_c;    private Integer      fdstatus_c;    //调用分页默认值    int currentPage=1 ; // 定义没页要显示的记录数    int lineSize=10;    // 总记录数 / 每页显示的记录数    int allRecorders;    public FinddictionaryService getService() {        return service;    }    public void setService(FinddictionaryService service) {        this.service = service;    }    public Finddictionary getfinddictionary() {        return finddictionary;    }    public void setFinddictionary(Finddictionary finddictionary) {        this.finddictionary = finddictionary;    }    public int getCurrentPage() {        return currentPage;    }    public void setCurrentPage(int currentPage) {        this.currentPage = currentPage;    }    public String  getFdtype_c()     {       return  fdtype_c ;    }    public void  setFdtype_c (String fdtype_c )    {        HttpServletRequest request = ServletActionContext.getRequest();        if (request.getMethod().equals("POST")) {             this.fdtype_c =fdtype_c;        } else {            try {                 this.fdtype_c =fdtype_c;                 } catch (Exception e) {  }      }    }    public String  getFdname_c()     {       return  fdname_c ;    }    public void  setFdname_c (String fdname_c )    {        HttpServletRequest request = ServletActionContext.getRequest();        if (request.getMethod().equals("POST")) {             this.fdname_c =fdname_c;        } else {            try {                 this.fdname_c =fdname_c;                 } catch (Exception e) {  }      }    }    public String  getFdvalue_c()     {       return  fdvalue_c ;    }    public void  setFdvalue_c (String fdvalue_c )    {        HttpServletRequest request = ServletActionContext.getRequest();        if (request.getMethod().equals("POST")) {             this.fdvalue_c =fdvalue_c;        } else {            try {                 this.fdvalue_c =fdvalue_c;                 } catch (Exception e) {  }      }    }    public String  getFdremark_c()     {       return  fdremark_c ;    }    public void  setFdremark_c (String fdremark_c )    {        HttpServletRequest request = ServletActionContext.getRequest();        if (request.getMethod().equals("POST")) {             this.fdremark_c =fdremark_c;        } else {            try {                 this.fdremark_c =fdremark_c;                 } catch (Exception e) {  }      }    }    public Integer  getFdparentid_c()     {       return  fdparentid_c ;    }    public void  setFdparentid_c (Integer fdparentid_c )    {        HttpServletRequest request = ServletActionContext.getRequest();        if (request.getMethod().equals("POST")) {             this.fdparentid_c =fdparentid_c;        } else {                 this.fdparentid_c =fdparentid_c;      }    }    public String  getFddictionarystatus_c()     {       return  fddictionarystatus_c ;    }    public void  setFddictionarystatus_c (String fddictionarystatus_c )    {        HttpServletRequest request = ServletActionContext.getRequest();        if (request.getMethod().equals("POST")) {             this.fddictionarystatus_c =fddictionarystatus_c;        } else {            try {                 this.fddictionarystatus_c =fddictionarystatus_c;                 } catch (Exception e) {  }      }    }    public String  getFdoperator_c()     {       return  fdoperator_c ;    }    public void  setFdoperator_c (String fdoperator_c )    {        HttpServletRequest request = ServletActionContext.getRequest();        if (request.getMethod().equals("POST")) {             this.fdoperator_c =fdoperator_c;        } else {            try {                 this.fdoperator_c =fdoperator_c;                 } catch (Exception e) {  }      }    }    public Date  getFdoperatedate_c()     {       return  fdoperatedate_c ;    }    public void  setFdoperatedate_c (Date fdoperatedate_c )    {        HttpServletRequest request = ServletActionContext.getRequest();        if (request.getMethod().equals("POST")) {             this.fdoperatedate_c =fdoperatedate_c;        } else {                 this.fdoperatedate_c =fdoperatedate_c;      }    }    public Integer  getFdstatus_c()     {       return  fdstatus_c ;    }    public void  setFdstatus_c (Integer fdstatus_c )    {        HttpServletRequest request = ServletActionContext.getRequest();        if (request.getMethod().equals("POST")) {             this.fdstatus_c =fdstatus_c;        } else {                 this.fdstatus_c =fdstatus_c;      }    }    @SuppressWarnings("serial")    public String list() throws Exception {        Map request = (Map) ActionContext.getContext().get("request");        request.put("list", service.findAll());        return "listsuccess";    }    @SuppressWarnings("unchecked")    public String saveP() throws Exception {        return "saveP";    }    @SuppressWarnings("unchecked")    public String save() throws Exception {        try {            this.service.save(this.finddictionary);            return "savesuccess";        } catch (Exception e)        {            ByteArrayOutputStream msg = new ByteArrayOutputStream();            e.printStackTrace(new PrintStream(msg));            addActionError("保存出错,堆栈信息如下:</BR>"+msg.toString());             Logger logger = Logger.getLogger(this.getClass());            logger.error("programe error !finddictionarysaveAction.java "); // 写到日志文件 C:\\log4j_error.log 中            return "saveerror";        }    }    @SuppressWarnings("unchecked")    public String updateP() throws Exception {        finddictionary = this.service.findByFdid(finddictionary.getFdid());        return "updateP";    }    @SuppressWarnings("unchecked")    public String update() throws Exception {        try {            this.service.update(this.finddictionary);            return "updatesuccess";        } catch (Exception e)        {            ByteArrayOutputStream msg = new ByteArrayOutputStream();            e.printStackTrace(new PrintStream(msg));            addActionError("保存出错,堆栈信息如下:</BR>"+msg.toString());             Logger logger = Logger.getLogger(this.getClass());            logger.error("programe error !finddictionaryupdateAction.java "); // 写到日志文件 C:\\log4j_error.log 中            return "updateerror";        }    }    @SuppressWarnings("unchecked")    public String remove() throws Exception {        this.service.delete(finddictionary);        return "removesuccess";    }    @SuppressWarnings("unchecked")    public String listByFdtypeFdnameFdvalueFdremarkFdparentidFddictionarystatusFdoperatorFdoperatedateFdstatus() throws Exception {        Map request = (Map) ActionContext.getContext().get("request");        if ( this.getFdtype_c()==null )         {            this.setFdtype_c("");          }         if ( this.getFdname_c()==null )         {            this.setFdname_c("");          }         if ( this.getFdvalue_c()==null )         {            this.setFdvalue_c("");          }         if ( this.getFdremark_c()==null )         {            this.setFdremark_c("");          }         if ( this.getFddictionarystatus_c()==null )         {            this.setFddictionarystatus_c("");          }         if ( this.getFdoperator_c()==null )         {            this.setFdoperator_c("");          }         allRecorders = service.findFinddictionaryByFdtypeFdnameFdvalueFdremarkFdparentidFddictionarystatusFdoperatorFdoperatedateFdstatus_count( this.getFdtype_c() , this.getFdname_c() , this.getFdvalue_c() , this.getFdremark_c() , this.getFdparentid_c() , this.getFddictionarystatus_c() , this.getFdoperator_c() , this.getFdoperatedate_c() , this.getFdstatus_c() ) ;        request.put("currentPage",new Integer(currentPage)) ; //当前页        request.put("allRecorders",new Integer(allRecorders)) ;//总记录总数        request.put("list", service.findFinddictionaryByFdtypeFdnameFdvalueFdremarkFdparentidFddictionarystatusFdoperatorFdoperatedateFdstatus( this.getFdtype_c() , this.getFdname_c() , this.getFdvalue_c() , this.getFdremark_c() , this.getFdparentid_c() , this.getFddictionarystatus_c() , this.getFdoperator_c() , this.getFdoperatedate_c() , this.getFdstatus_c() ,this.getCurrentPage(),lineSize));        return "listByFdtypeFdnameFdvalueFdremarkFdparentidFddictionarystatusFdoperatorFdoperatedateFdstatus";    }    @SuppressWarnings("unchecked")    public InputStream getDownloadFile() {        return this.service.getInputStream( this.getFdtype_c() , this.getFdname_c() , this.getFdvalue_c() , this.getFdremark_c() , this.getFdparentid_c() , this.getFddictionarystatus_c() , this.getFdoperator_c() , this.getFdoperatedate_c() , this.getFdstatus_c() );    }    @SuppressWarnings("unchecked")    public String generateExcel() throws Exception {          return "generateExcel";    }}
