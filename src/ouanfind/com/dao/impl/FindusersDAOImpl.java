package ouanfind.com.dao.impl;import java.util.Date;import java.text.SimpleDateFormat;import java.util.List;import org.hibernate.Hibernate;import org.hibernate.Query;import org.springframework.orm.hibernate3.support.HibernateDaoSupport;import org.hibernate.transform.Transformers;import ouanfind.com.bean.*;import ouanfind.com.dao.FindusersDAO;@SuppressWarnings("unchecked")public class FindusersDAOImpl extends HibernateDaoSupport implements FindusersDAO {    public List<Findusers> findAllFindusers() {        String hql = "from Findusers findusers order by findusers.findusers_id ";        return (List<Findusers>) this.getHibernateTemplate().find(hql);    }    public Findusers findFindusersByFindusers_id(Integer findusers_id) {        Findusers findusers = (Findusers) this.getHibernateTemplate().get(Findusers.class, findusers_id);        return findusers;    }    public void removeFindusers(Findusers findusers) {        this.getHibernateTemplate().delete(findusers);    }    public void saveFindusers(Findusers findusers) {        this.getHibernateTemplate().save(findusers);    }    public void updateFindusers(Findusers findusers) {        this.getHibernateTemplate().update(findusers);    }    public int findFindusersByFindusers_name_count( String findusers_name_c ){       String hql_where="";       String hql = " from Findusers findusers  ";        if (!findusers_name_c.equals("")){            if (hql_where.equals(""))            {               hql_where= hql_where + " findusers.findusers_name='" + findusers_name_c + "'" ;             }else             {               hql_where= hql_where + "   AND   findusers.findusers_name='" + findusers_name_c + "'" ;             }         }       if (!hql_where.equals(""))         {           hql=hql+" where " + hql_where;          }        return (this.getHibernateTemplate().find(hql)).size();    }    public List<Findusers> findFindusersByFindusers_name( String findusers_name_c ,int currentPage, int lineSize) {       String hql_where="";          String hql ="select FINDUSERS_ID,FINDUSERS_NAME,FINDUSERS_REALNAME,FINDUSERS_NICKNAME,FINDUSERS_SEX,FINDUSERS_PASSWORD,FINDUSERS_AGE,FINDUSERS_ADDRESS,FINDUSERS_PROVIENCE,FINDUSERS_CITY,FINDUSERS_COUNTY,FINDUSERS_EMAIL,FINDUSERS_TELEPH,FINDUSERS_NATIONALITY,FINDUSERS_NATION,FINDUSERS_CONSTELLATION,FINDUSERS_BLOODTYPE,FINDUSERS_STATURE,FINDUSERS_WEIGHT,FINDUSERS_HOMEPACE,FINDUSERS_DATEBIRTH,FINDUSERS_VOCATION,FINDUSERS_QQ,FINDUSERS_GRADUATESCHOOL,FINDUSERS_CURRENTCOMPANY,FINDUSERS_SPECIALSKILL,FINDUSERS_ACCOMPLISH,FINDUSERS_EMPIRICVALUE,FINDUSERS_VIPLEVEL,FINDUSERS_HEADSCULPTURE1,FINDUSERS_HEADSCULPTURE2,FINDUSERS_REGISTERDATE,FINDUSERS_OPERATER,FINDUSERS_OPERATEDATE,FINDUSERS_STATUS,row_number() over(order by FINDUSERS_ID ) as rownum  from findusers   ";        if (!findusers_name_c.equals("")){            if (hql_where.equals(""))            {               hql_where= hql_where + " findusers.findusers_name='" + findusers_name_c + "'" ;             }else             {               hql_where= hql_where + "   AND   findusers.findusers_name='" + findusers_name_c + "'" ;             }         }       if (!hql_where.equals(""))        {              hql=hql+" where " + hql_where;        }          hql="select *  from ("+ hql+ ") row_ where rownum between " + ((currentPage-1)*lineSize+1) + " and " + currentPage*lineSize;           Query queryObject = this.getSession().createSQLQuery(hql)                                      .addScalar("findusers_id",Hibernate.INTEGER)                                      .addScalar("findusers_name",Hibernate.STRING)                                      .addScalar("findusers_realname",Hibernate.STRING)                                      .addScalar("findusers_nickname",Hibernate.STRING)                                      .addScalar("findusers_sex",Hibernate.STRING)                                      .addScalar("findusers_password",Hibernate.STRING)                                      .addScalar("findusers_age",Hibernate.INTEGER)                                      .addScalar("findusers_address",Hibernate.STRING)                                      .addScalar("findusers_provience",Hibernate.STRING)                                      .addScalar("findusers_city",Hibernate.STRING)                                      .addScalar("findusers_county",Hibernate.STRING)                                      .addScalar("findusers_email",Hibernate.STRING)                                      .addScalar("findusers_teleph",Hibernate.STRING)                                      .addScalar("findusers_nationality",Hibernate.STRING)                                      .addScalar("findusers_nation",Hibernate.STRING)                                      .addScalar("findusers_constellation",Hibernate.STRING)                                      .addScalar("findusers_bloodtype",Hibernate.STRING)                                      .addScalar("findusers_stature",Hibernate.INTEGER)                                      .addScalar("findusers_weight",Hibernate.INTEGER)                                      .addScalar("findusers_homepace",Hibernate.STRING)                                      .addScalar("findusers_datebirth")                                      .addScalar("findusers_vocation",Hibernate.STRING)                                      .addScalar("findusers_qq",Hibernate.INTEGER)                                      .addScalar("findusers_graduateschool",Hibernate.STRING)                                      .addScalar("findusers_currentcompany",Hibernate.STRING)                                      .addScalar("findusers_specialskill",Hibernate.STRING)                                      .addScalar("findusers_accomplish",Hibernate.STRING)                                      .addScalar("findusers_empiricvalue",Hibernate.INTEGER)                                      .addScalar("findusers_viplevel",Hibernate.INTEGER)                                      .addScalar("findusers_headsculpture1",Hibernate.STRING)                                      .addScalar("findusers_headsculpture2",Hibernate.STRING)                                      .addScalar("findusers_registerdate")                                      .addScalar("findusers_operater",Hibernate.STRING)                                      .addScalar("findusers_operatedate")                                      .addScalar("findusers_status",Hibernate.INTEGER)                                      .setResultTransformer(Transformers.aliasToBean(Findusers.class));              return queryObject.list();    }    public List<Findusers> findFindusersByFindusers_name_excel( String findusers_name_c ) {        String hql_where="";        String hql = "from Findusers findusers  ";        if (!findusers_name_c.equals("")){            if (hql_where.equals(""))            {               hql_where= hql_where + " findusers.findusers_name='" + findusers_name_c + "'" ;             }else             {               hql_where= hql_where + "   AND   findusers.findusers_name='" + findusers_name_c + "'" ;             }         }       if (!hql_where.equals(""))         {           hql=hql+" where " + hql_where;          }        hql = hql+ " order by findusers.findusers_id ";        return (List<Findusers>) this.getHibernateTemplate().find(hql);    }    public List<Findusers_findusers_sex_dict_finddictionary_finddictionary_value>getFindusers_findusers_sex_dict_finddictionary_finddictionary_value(){      String sql ="select FINDDICTIONARY_VALUE as dm ,FINDDICTIONARY_VALUE as sm from FINDDICTIONARY ";      Query queryObject =this.getSession().createSQLQuery(sql)                               .addScalar("dm",Hibernate.STRING)                               .addScalar("sm",Hibernate.STRING)                               .setResultTransformer(Transformers.aliasToBean(Findusers_findusers_sex_dict_finddictionary_finddictionary_value.class));         return queryObject.list();    }}
