package ouanfind.com.service.impl;import java.util.Date;import java.text.SimpleDateFormat; import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.InputStream;import java.io.OutputStream;import java.util.List;import org.apache.poi.hssf.usermodel.HSSFCell;import org.apache.poi.hssf.usermodel.HSSFRow;import org.apache.poi.hssf.usermodel.HSSFSheet;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import ouanfind.com.bean.*;import ouanfind.com.dao.FinddictionaryDAO;import ouanfind.com.service.FinddictionaryService;public class FinddictionaryServiceImpl implements FinddictionaryService {    private FinddictionaryDAO finddictionaryDao;    public FinddictionaryDAO getFinddictionaryDao() {        return finddictionaryDao;    }    public void setFinddictionaryDao(FinddictionaryDAO finddictionaryDao) {        this.finddictionaryDao = finddictionaryDao;    }    public void delete(Finddictionary finddictionary) {        this.finddictionaryDao.removeFinddictionary(finddictionary);    }    public List<Finddictionary> findAll() {        return this.finddictionaryDao.findAllFinddictionary();    }    public Finddictionary findByFdid(Integer fdid) {        return this.finddictionaryDao.findFinddictionaryByFdid(fdid);    }    public void save(Finddictionary finddictionary) {        this.finddictionaryDao.saveFinddictionary(finddictionary);    }    public void update(Finddictionary finddictionary) {        this.finddictionaryDao.updateFinddictionary(finddictionary);    }    public int findFinddictionaryByFdtypeFdnameFdvalueFdremarkFdparentidFddictionarystatusFdoperatorFdoperatedateFdstatus_count( String fdtype_c , String fdname_c , String fdvalue_c , String fdremark_c , Integer fdparentid_c , String fddictionarystatus_c , String fdoperator_c , Date fdoperatedate_c , Integer fdstatus_c ){        return this.finddictionaryDao.findFinddictionaryByFdtypeFdnameFdvalueFdremarkFdparentidFddictionarystatusFdoperatorFdoperatedateFdstatus_count( fdtype_c , fdname_c , fdvalue_c , fdremark_c , fdparentid_c , fddictionarystatus_c , fdoperator_c , fdoperatedate_c , fdstatus_c );    }    public List<Finddictionary> findFinddictionaryByFdtypeFdnameFdvalueFdremarkFdparentidFddictionarystatusFdoperatorFdoperatedateFdstatus( String fdtype_c , String fdname_c , String fdvalue_c , String fdremark_c , Integer fdparentid_c , String fddictionarystatus_c , String fdoperator_c , Date fdoperatedate_c , Integer fdstatus_c , int currentPage,int lineSize) {        return this.finddictionaryDao.findFinddictionaryByFdtypeFdnameFdvalueFdremarkFdparentidFddictionarystatusFdoperatorFdoperatedateFdstatus( fdtype_c , fdname_c , fdvalue_c , fdremark_c , fdparentid_c , fddictionarystatus_c , fdoperator_c , fdoperatedate_c , fdstatus_c ,currentPage,lineSize);    }    public List<Finddictionary> findFinddictionaryByFdtypeFdnameFdvalueFdremarkFdparentidFddictionarystatusFdoperatorFdoperatedateFdstatus_excel( String fdtype_c , String fdname_c , String fdvalue_c , String fdremark_c , Integer fdparentid_c , String fddictionarystatus_c , String fdoperator_c , Date fdoperatedate_c , Integer fdstatus_c ) {        return this.finddictionaryDao.findFinddictionaryByFdtypeFdnameFdvalueFdremarkFdparentidFddictionarystatusFdoperatorFdoperatedateFdstatus_excel( fdtype_c , fdname_c , fdvalue_c , fdremark_c , fdparentid_c , fddictionarystatus_c , fdoperator_c , fdoperatedate_c , fdstatus_c );    }    public InputStream getInputStream( String fdtype_c , String fdname_c , String fdvalue_c , String fdremark_c , Integer fdparentid_c , String fddictionarystatus_c , String fdoperator_c , Date fdoperatedate_c , Integer fdstatus_c ) {        SimpleDateFormat sd = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        HSSFWorkbook wb = new HSSFWorkbook();        HSSFSheet sheet = wb.createSheet("RecordsSheet");        HSSFRow row = sheet.createRow(0);        HSSFCell cell = row.createCell((short) 0);        cell.setEncoding(HSSFCell.ENCODING_UTF_16);        cell.setCellValue("fdid");        cell = row.createCell((short) 1);        cell.setEncoding(HSSFCell.ENCODING_UTF_16);        cell.setCellValue("fdtype");        cell = row.createCell((short) 2);        cell.setEncoding(HSSFCell.ENCODING_UTF_16);        cell.setCellValue("fdname");        cell = row.createCell((short) 3);        cell.setEncoding(HSSFCell.ENCODING_UTF_16);        cell.setCellValue("fdvalue");        cell = row.createCell((short) 4);        cell.setEncoding(HSSFCell.ENCODING_UTF_16);        cell.setCellValue("fdremark");        cell = row.createCell((short) 5);        cell.setEncoding(HSSFCell.ENCODING_UTF_16);        cell.setCellValue("fdparentid");        cell = row.createCell((short) 6);        cell.setEncoding(HSSFCell.ENCODING_UTF_16);        cell.setCellValue("fddictionarystatus");        cell = row.createCell((short) 7);        cell.setEncoding(HSSFCell.ENCODING_UTF_16);        cell.setCellValue("fdoperator");        cell = row.createCell((short) 8);        cell.setEncoding(HSSFCell.ENCODING_UTF_16);        cell.setCellValue("fdoperatedate");        cell = row.createCell((short) 9);        cell.setEncoding(HSSFCell.ENCODING_UTF_16);        cell.setCellValue("fdstatus");        List<Finddictionary> list;        if ( fdtype_c==null )            {             fdtype_c="";            }        if ( fdname_c==null )            {             fdname_c="";            }        if ( fdvalue_c==null )            {             fdvalue_c="";            }        if ( fdremark_c==null )            {             fdremark_c="";            }        if ( fddictionarystatus_c==null )            {             fddictionarystatus_c="";            }        if ( fdoperator_c==null )            {             fdoperator_c="";            }        list = this.findFinddictionaryByFdtypeFdnameFdvalueFdremarkFdparentidFddictionarystatusFdoperatorFdoperatedateFdstatus_excel( fdtype_c , fdname_c , fdvalue_c , fdremark_c , fdparentid_c , fddictionarystatus_c , fdoperator_c , fdoperatedate_c , fdstatus_c );        for (int i = 0; i < list.size(); ++i) {            Finddictionary finddictionary = list.get(i);            row = sheet.createRow(i + 1);            cell = row.createCell((short) 0);            cell.setEncoding(HSSFCell.ENCODING_UTF_16);            if (finddictionary.getFdid() != null) {                cell.setCellValue(finddictionary.getFdid());            } else {                cell.setCellValue("");            }            cell = row.createCell((short) 1);            cell.setEncoding(HSSFCell.ENCODING_UTF_16);            if (finddictionary.getFdtype() != null) {                cell.setCellValue(finddictionary.getFdtype());            } else {                cell.setCellValue("");            }            cell = row.createCell((short) 2);            cell.setEncoding(HSSFCell.ENCODING_UTF_16);            if (finddictionary.getFdname() != null) {                cell.setCellValue(finddictionary.getFdname());            } else {                cell.setCellValue("");            }            cell = row.createCell((short) 3);            cell.setEncoding(HSSFCell.ENCODING_UTF_16);            if (finddictionary.getFdvalue() != null) {                cell.setCellValue(finddictionary.getFdvalue());            } else {                cell.setCellValue("");            }            cell = row.createCell((short) 4);            cell.setEncoding(HSSFCell.ENCODING_UTF_16);            if (finddictionary.getFdremark() != null) {                cell.setCellValue(finddictionary.getFdremark());            } else {                cell.setCellValue("");            }            cell = row.createCell((short) 5);            cell.setEncoding(HSSFCell.ENCODING_UTF_16);            if (finddictionary.getFdparentid() != null) {                cell.setCellValue(finddictionary.getFdparentid());            } else {                cell.setCellValue("");            }            cell = row.createCell((short) 6);            cell.setEncoding(HSSFCell.ENCODING_UTF_16);            if (finddictionary.getFddictionarystatus() != null) {                cell.setCellValue(finddictionary.getFddictionarystatus());            } else {                cell.setCellValue("");            }            cell = row.createCell((short) 7);            cell.setEncoding(HSSFCell.ENCODING_UTF_16);            if (finddictionary.getFdoperator() != null) {                cell.setCellValue(finddictionary.getFdoperator());            } else {                cell.setCellValue("");            }            cell = row.createCell((short) 8);            cell.setEncoding(HSSFCell.ENCODING_UTF_16);            if (finddictionary.getFdoperatedate() != null) {                cell.setCellValue(sd.format(finddictionary.getFdoperatedate()));            } else {                cell.setCellValue("");            }            cell = row.createCell((short) 9);            cell.setEncoding(HSSFCell.ENCODING_UTF_16);            if (finddictionary.getFdstatus() != null) {                cell.setCellValue(finddictionary.getFdstatus());            } else {                cell.setCellValue("");            }        }        File file = new File("test.xls");        try {            OutputStream os = new FileOutputStream(file);            wb.write(os);            os.close();        } catch (Exception e) {            e.printStackTrace();        }        InputStream is = null;        try {            is = new FileInputStream(file);        } catch (FileNotFoundException e) {            e.printStackTrace();        }        return is;    }}
